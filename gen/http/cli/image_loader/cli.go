// Code generated by goa v3.2.3, DO NOT EDIT.
//
// image-loader HTTP client CLI support package
//
// Command:
// $ goa gen image-loader/design

package cli

import (
	"flag"
	"fmt"
	imagesc "image-loader/gen/http/images/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `images load- new- satellite- image
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` images load- new- satellite- image --body '{
      "date_time": "1994-09-19T16:01:12Z",
      "geographic_information": {
         "coordinates": {
            "Sit facilis qui et voluptas.": 0.45731705303115716
         },
         "tag_name": "Nemo occaecati aperiam quis autem."
      },
      "id": "Harum architecto quo molestias qui.",
      "normalized_indexes": {
         "ndvi": [
            0.18711642837954914,
            0.09177180070813358,
            0.7808423638626252
         ],
         "ndwi": [
            0.7146847364477503,
            0.540422727294012,
            0.5322622263700029,
            0.299780450041929
         ]
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		imagesFlags = flag.NewFlagSet("images", flag.ContinueOnError)

		imagesLoadNewSatelliteImageFlags    = flag.NewFlagSet("load- new- satellite- image", flag.ExitOnError)
		imagesLoadNewSatelliteImageBodyFlag = imagesLoadNewSatelliteImageFlags.String("body", "REQUIRED", "")
	)
	imagesFlags.Usage = imagesUsage
	imagesLoadNewSatelliteImageFlags.Usage = imagesLoadNewSatelliteImageUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "images":
			svcf = imagesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "images":
			switch epn {
			case "load- new- satellite- image":
				epf = imagesLoadNewSatelliteImageFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "images":
			c := imagesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "load- new- satellite- image":
				endpoint = c.LoadNewSatelliteImage()
				data, err = imagesc.BuildLoadNewSatelliteImagePayload(*imagesLoadNewSatelliteImageBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// imagesUsage displays the usage of the images command and its subcommands.
func imagesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Images service interface.
Usage:
    %s [globalflags] images COMMAND [flags]

COMMAND:
    load- new- satellite- image: loads a new image into the database

Additional help:
    %s images COMMAND --help
`, os.Args[0], os.Args[0])
}
func imagesLoadNewSatelliteImageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] images load- new- satellite- image -body JSON

loads a new image into the database
    -body JSON: 

Example:
    `+os.Args[0]+` images load- new- satellite- image --body '{
      "date_time": "1994-09-19T16:01:12Z",
      "geographic_information": {
         "coordinates": {
            "Sit facilis qui et voluptas.": 0.45731705303115716
         },
         "tag_name": "Nemo occaecati aperiam quis autem."
      },
      "id": "Harum architecto quo molestias qui.",
      "normalized_indexes": {
         "ndvi": [
            0.18711642837954914,
            0.09177180070813358,
            0.7808423638626252
         ],
         "ndwi": [
            0.7146847364477503,
            0.540422727294012,
            0.5322622263700029,
            0.299780450041929
         ]
      }
   }'
`, os.Args[0])
}
