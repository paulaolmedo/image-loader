// Code generated by goa v3.3.1, DO NOT EDIT.
//
// Satellite Image Loader API HTTP client CLI support package
//
// Command:
// $ goa gen image-loader/design

package cli

import (
	"flag"
	"fmt"
	processedimagesc "image-loader/gen/http/processed_images/client"
	rawimagesc "image-loader/gen/http/raw_images/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `raw- images (load- new- raw- satellite- image|get- raw- satellite- image)
processed- images (load- new- processed- satellite- image|get- processed- satellite- image)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` raw- images load- new- raw- satellite- image --body '{
      "file_name": "Ab fugiat voluptates architecto et.",
      "id": "Consectetur quis sint voluptatem optio consequuntur non."
   }'` + "\n" +
		os.Args[0] + ` processed- images load- new- processed- satellite- image --body '{
      "date_time": "1970-01-25T12:06:03Z",
      "file_name": "Nobis quia quos eos.",
      "geographic_information": {
         "coordinates": {
            "Odit quibusdam numquam facilis.": 0.2603996896098972
         },
         "tag_name": "Unde sed dolorum."
      },
      "normalized_indexes": {
         "ndvi": [
            0.8597346016425331,
            0.3908551358201754
         ],
         "ndwi": [
            0.795787140008295,
            0.1907488332785942,
            0.6233789336290386
         ]
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		rawImagesFlags = flag.NewFlagSet("raw- images", flag.ContinueOnError)

		rawImagesLoadNewRawSatelliteImageFlags    = flag.NewFlagSet("load- new- raw- satellite- image", flag.ExitOnError)
		rawImagesLoadNewRawSatelliteImageBodyFlag = rawImagesLoadNewRawSatelliteImageFlags.String("body", "REQUIRED", "")

		rawImagesGetRawSatelliteImageFlags    = flag.NewFlagSet("get- raw- satellite- image", flag.ExitOnError)
		rawImagesGetRawSatelliteImageBodyFlag = rawImagesGetRawSatelliteImageFlags.String("body", "REQUIRED", "")

		processedImagesFlags = flag.NewFlagSet("processed- images", flag.ContinueOnError)

		processedImagesLoadNewProcessedSatelliteImageFlags    = flag.NewFlagSet("load- new- processed- satellite- image", flag.ExitOnError)
		processedImagesLoadNewProcessedSatelliteImageBodyFlag = processedImagesLoadNewProcessedSatelliteImageFlags.String("body", "REQUIRED", "")

		processedImagesGetProcessedSatelliteImageFlags    = flag.NewFlagSet("get- processed- satellite- image", flag.ExitOnError)
		processedImagesGetProcessedSatelliteImageBodyFlag = processedImagesGetProcessedSatelliteImageFlags.String("body", "REQUIRED", "")
	)
	rawImagesFlags.Usage = rawImagesUsage
	rawImagesLoadNewRawSatelliteImageFlags.Usage = rawImagesLoadNewRawSatelliteImageUsage
	rawImagesGetRawSatelliteImageFlags.Usage = rawImagesGetRawSatelliteImageUsage

	processedImagesFlags.Usage = processedImagesUsage
	processedImagesLoadNewProcessedSatelliteImageFlags.Usage = processedImagesLoadNewProcessedSatelliteImageUsage
	processedImagesGetProcessedSatelliteImageFlags.Usage = processedImagesGetProcessedSatelliteImageUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "raw- images":
			svcf = rawImagesFlags
		case "processed- images":
			svcf = processedImagesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "raw- images":
			switch epn {
			case "load- new- raw- satellite- image":
				epf = rawImagesLoadNewRawSatelliteImageFlags

			case "get- raw- satellite- image":
				epf = rawImagesGetRawSatelliteImageFlags

			}

		case "processed- images":
			switch epn {
			case "load- new- processed- satellite- image":
				epf = processedImagesLoadNewProcessedSatelliteImageFlags

			case "get- processed- satellite- image":
				epf = processedImagesGetProcessedSatelliteImageFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "raw- images":
			c := rawimagesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "load- new- raw- satellite- image":
				endpoint = c.LoadNewRawSatelliteImage()
				data, err = rawimagesc.BuildLoadNewRawSatelliteImagePayload(*rawImagesLoadNewRawSatelliteImageBodyFlag)
			case "get- raw- satellite- image":
				endpoint = c.GetRawSatelliteImage()
				data, err = rawimagesc.BuildGetRawSatelliteImagePayload(*rawImagesGetRawSatelliteImageBodyFlag)
			}
		case "processed- images":
			c := processedimagesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "load- new- processed- satellite- image":
				endpoint = c.LoadNewProcessedSatelliteImage()
				data, err = processedimagesc.BuildLoadNewProcessedSatelliteImagePayload(*processedImagesLoadNewProcessedSatelliteImageBodyFlag)
			case "get- processed- satellite- image":
				endpoint = c.GetProcessedSatelliteImage()
				data, err = processedimagesc.BuildGetProcessedSatelliteImagePayload(*processedImagesGetProcessedSatelliteImageBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// raw- imagesUsage displays the usage of the raw- images command and its
// subcommands.
func rawImagesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Raw images service interface.
Usage:
    %s [globalflags] raw- images COMMAND [flags]

COMMAND:
    load- new- raw- satellite- image: loads a new image into the database
    get- raw- satellite- image: get a raw image from the database

Additional help:
    %s raw- images COMMAND --help
`, os.Args[0], os.Args[0])
}
func rawImagesLoadNewRawSatelliteImageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] raw- images load- new- raw- satellite- image -body JSON

loads a new image into the database
    -body JSON: 

Example:
    `+os.Args[0]+` raw- images load- new- raw- satellite- image --body '{
      "file_name": "Ab fugiat voluptates architecto et.",
      "id": "Consectetur quis sint voluptatem optio consequuntur non."
   }'
`, os.Args[0])
}

func rawImagesGetRawSatelliteImageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] raw- images get- raw- satellite- image -body JSON

get a raw image from the database
    -body JSON: 

Example:
    `+os.Args[0]+` raw- images get- raw- satellite- image --body '{
      "file_name": "Enim corrupti eligendi ipsum ipsa fugit."
   }'
`, os.Args[0])
}

// processed- imagesUsage displays the usage of the processed- images command
// and its subcommands.
func processedImagesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Processed images service interface.
Usage:
    %s [globalflags] processed- images COMMAND [flags]

COMMAND:
    load- new- processed- satellite- image: loads a new processed image into the database
    get- processed- satellite- image: get a processed image from the database

Additional help:
    %s processed- images COMMAND --help
`, os.Args[0], os.Args[0])
}
func processedImagesLoadNewProcessedSatelliteImageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] processed- images load- new- processed- satellite- image -body JSON

loads a new processed image into the database
    -body JSON: 

Example:
    `+os.Args[0]+` processed- images load- new- processed- satellite- image --body '{
      "date_time": "1970-01-25T12:06:03Z",
      "file_name": "Nobis quia quos eos.",
      "geographic_information": {
         "coordinates": {
            "Odit quibusdam numquam facilis.": 0.2603996896098972
         },
         "tag_name": "Unde sed dolorum."
      },
      "normalized_indexes": {
         "ndvi": [
            0.8597346016425331,
            0.3908551358201754
         ],
         "ndwi": [
            0.795787140008295,
            0.1907488332785942,
            0.6233789336290386
         ]
      }
   }'
`, os.Args[0])
}

func processedImagesGetProcessedSatelliteImageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] processed- images get- processed- satellite- image -body JSON

get a processed image from the database
    -body JSON: 

Example:
    `+os.Args[0]+` processed- images get- processed- satellite- image --body '{
      "file_name": "Quasi sequi."
   }'
`, os.Args[0])
}
