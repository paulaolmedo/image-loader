// Code generated by goa v3.2.3, DO NOT EDIT.
//
// Images HTTP client types
//
// Command:
// $ goa gen image-loader/design

package client

import (
	images "image-loader/gen/images"

	goa "goa.design/goa/v3/pkg"
)

// LoadNewSatelliteImageRequestBody is the type of the "Images" service "Load
// new satellite image" endpoint HTTP request body.
type LoadNewSatelliteImageRequestBody struct {
	// The image identifier
	ID                    *string                           `bson:"_id"`
	GeographicInformation *GeographicInformationRequestBody `form:"geographic_information,omitempty" json:"geographic_information,omitempty" xml:"geographic_information,omitempty"`
	// When was the image taken
	DateTime          *string                       `form:"date_time,omitempty" json:"date_time,omitempty" xml:"date_time,omitempty"`
	NormalizedIndexes *NormalizedIndexesRequestBody `form:"normalized_indexes,omitempty" json:"normalized_indexes,omitempty" xml:"normalized_indexes,omitempty"`
}

// LoadNewSatelliteImageBadRequestResponseBody is the type of the "Images"
// service "Load new satellite image" endpoint HTTP response body for the
// "BadRequest" error.
type LoadNewSatelliteImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoadNewSatelliteImageInternalErrorResponseBody is the type of the "Images"
// service "Load new satellite image" endpoint HTTP response body for the
// "InternalError" error.
type LoadNewSatelliteImageInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GeographicInformationRequestBody is used to define fields on request body
// types.
type GeographicInformationRequestBody struct {
	// Non-forgetable identifier
	TagName *string `form:"tag_name,omitempty" json:"tag_name,omitempty" xml:"tag_name,omitempty"`
	// Coordinates of the satellite image
	Coordinates map[string]float64 `form:"coordinates,omitempty" json:"coordinates,omitempty" xml:"coordinates,omitempty"`
}

// NormalizedIndexesRequestBody is used to define fields on request body types.
type NormalizedIndexesRequestBody struct {
	// Normalized difference vegetation index
	Ndvi []float64 `form:"ndvi,omitempty" json:"ndvi,omitempty" xml:"ndvi,omitempty"`
	// Normalized difference water index
	Ndwi []float64 `form:"ndwi,omitempty" json:"ndwi,omitempty" xml:"ndwi,omitempty"`
}

// NewLoadNewSatelliteImageRequestBody builds the HTTP request body from the
// payload of the "Load new satellite image" endpoint of the "Images" service.
func NewLoadNewSatelliteImageRequestBody(p *images.SatelliteImage) *LoadNewSatelliteImageRequestBody {
	body := &LoadNewSatelliteImageRequestBody{
		ID:       p.ID,
		DateTime: p.DateTime,
	}
	if p.GeographicInformation != nil {
		body.GeographicInformation = marshalImagesGeographicInformationToGeographicInformationRequestBody(p.GeographicInformation)
	}
	if p.NormalizedIndexes != nil {
		body.NormalizedIndexes = marshalImagesNormalizedIndexesToNormalizedIndexesRequestBody(p.NormalizedIndexes)
	}
	return body
}

// NewLoadNewSatelliteImageBadRequest builds a Images service Load new
// satellite image endpoint BadRequest error.
func NewLoadNewSatelliteImageBadRequest(body *LoadNewSatelliteImageBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLoadNewSatelliteImageInternalError builds a Images service Load new
// satellite image endpoint InternalError error.
func NewLoadNewSatelliteImageInternalError(body *LoadNewSatelliteImageInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateLoadNewSatelliteImageBadRequestResponseBody runs the validations
// defined on Load new satellite image_BadRequest_Response_Body
func ValidateLoadNewSatelliteImageBadRequestResponseBody(body *LoadNewSatelliteImageBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLoadNewSatelliteImageInternalErrorResponseBody runs the validations
// defined on Load new satellite image_InternalError_Response_Body
func ValidateLoadNewSatelliteImageInternalErrorResponseBody(body *LoadNewSatelliteImageInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
