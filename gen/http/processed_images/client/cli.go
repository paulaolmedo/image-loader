// Code generated by goa v3.3.1, DO NOT EDIT.
//
// Processed images HTTP client CLI support package
//
// Command:
// $ goa gen image-loader/design

package client

import (
	"encoding/json"
	"fmt"
	processedimages "image-loader/gen/processed_images"
)

// BuildLoadNewProcessedSatelliteImagePayload builds the payload for the
// Processed images Load new processed satellite image endpoint from CLI flags.
func BuildLoadNewProcessedSatelliteImagePayload(processedImagesLoadNewProcessedSatelliteImageBody string) (*processedimages.ProcessedSatelliteImage, error) {
	var err error
	var body LoadNewProcessedSatelliteImageRequestBody
	{
		err = json.Unmarshal([]byte(processedImagesLoadNewProcessedSatelliteImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"date_time\": \"1970-01-25T12:06:03Z\",\n      \"file_name\": \"Nobis quia quos eos.\",\n      \"geographic_information\": {\n         \"coordinates\": {\n            \"Odit quibusdam numquam facilis.\": 0.2603996896098972\n         },\n         \"tag_name\": \"Unde sed dolorum.\"\n      },\n      \"normalized_indexes\": {\n         \"ndvi\": [\n            0.8597346016425331,\n            0.3908551358201754\n         ],\n         \"ndwi\": [\n            0.795787140008295,\n            0.1907488332785942,\n            0.6233789336290386\n         ]\n      }\n   }'")
		}
	}
	v := &processedimages.ProcessedSatelliteImage{
		FileName: body.FileName,
		DateTime: body.DateTime,
	}
	if body.GeographicInformation != nil {
		v.GeographicInformation = marshalGeographicInformationRequestBodyToProcessedimagesGeographicInformation(body.GeographicInformation)
	}
	if body.NormalizedIndexes != nil {
		v.NormalizedIndexes = marshalNormalizedIndexesRequestBodyToProcessedimagesNormalizedIndexes(body.NormalizedIndexes)
	}

	return v, nil
}

// BuildGetProcessedSatelliteImagePayload builds the payload for the Processed
// images Get processed satellite image endpoint from CLI flags.
func BuildGetProcessedSatelliteImagePayload(processedImagesGetProcessedSatelliteImageBody string) (*processedimages.GetProcessedSatelliteImagePayload, error) {
	var err error
	var body GetProcessedSatelliteImageRequestBody
	{
		err = json.Unmarshal([]byte(processedImagesGetProcessedSatelliteImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file_name\": \"Quasi sequi.\"\n   }'")
		}
	}
	v := &processedimages.GetProcessedSatelliteImagePayload{
		FileName: body.FileName,
	}

	return v, nil
}
