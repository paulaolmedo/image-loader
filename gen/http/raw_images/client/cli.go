// Code generated by goa v3.3.1, DO NOT EDIT.
//
// Raw images HTTP client CLI support package
//
// Command:
// $ goa gen image-loader/design

package client

import (
	"encoding/json"
	"fmt"
	rawimages "image-loader/gen/raw_images"
)

// BuildLoadNewRawSatelliteImagePayload builds the payload for the Raw images
// Load new raw satellite image endpoint from CLI flags.
func BuildLoadNewRawSatelliteImagePayload(rawImagesLoadNewRawSatelliteImageBody string) (*rawimages.RawSatelliteImage, error) {
	var err error
	var body LoadNewRawSatelliteImageRequestBody
	{
		err = json.Unmarshal([]byte(rawImagesLoadNewRawSatelliteImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file_name\": \"Ab fugiat voluptates architecto et.\",\n      \"id\": \"Consectetur quis sint voluptatem optio consequuntur non.\"\n   }'")
		}
	}
	v := &rawimages.RawSatelliteImage{
		ID:       body.ID,
		FileName: body.FileName,
	}

	return v, nil
}

// BuildGetRawSatelliteImagePayload builds the payload for the Raw images Get
// raw satellite image endpoint from CLI flags.
func BuildGetRawSatelliteImagePayload(rawImagesGetRawSatelliteImageBody string) (*rawimages.GetRawSatelliteImagePayload, error) {
	var err error
	var body GetRawSatelliteImageRequestBody
	{
		err = json.Unmarshal([]byte(rawImagesGetRawSatelliteImageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"file_name\": \"Enim corrupti eligendi ipsum ipsa fugit.\"\n   }'")
		}
	}
	v := &rawimages.GetRawSatelliteImagePayload{
		FileName: body.FileName,
	}

	return v, nil
}
